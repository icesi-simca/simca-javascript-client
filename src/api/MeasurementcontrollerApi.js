/**
 * API SIMCA
 * SIMCA API Client
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pdgsimca@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/AddMeasurementDTO', '../model/AddValuesToMeasurementDTO', '../model/MeasurementDTO', '../model/MeasurementsDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddMeasurementDTO'), require('../model/AddValuesToMeasurementDTO'), require('../model/MeasurementDTO'), require('../model/MeasurementsDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiSimca) {
      root.ApiSimca = {};
    }
    root.ApiSimca.MeasurementcontrollerApi = factory(root.ApiSimca.ApiClient, root.ApiSimca.AddMeasurementDTO, root.ApiSimca.AddValuesToMeasurementDTO, root.ApiSimca.MeasurementDTO, root.ApiSimca.MeasurementsDTO);
  }
}(this, function(ApiClient, AddMeasurementDTO, AddValuesToMeasurementDTO, MeasurementDTO, MeasurementsDTO) {
  'use strict';

  /**
   * Measurementcontroller service.
   * @module api/MeasurementcontrollerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MeasurementcontrollerApi. 
   * @alias module:api/MeasurementcontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addValuesToMeasurementUsingPOST operation.
     * @callback module:api/MeasurementcontrollerApi~addValuesToMeasurementUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add values to a measurement
     * Add measured values of a given pollutant to a specified measurement.
     * @param {Number} measurementId Id of the measuremet to add values to
     * @param {module:model/AddValuesToMeasurementDTO} addValuesToMeasurementDTO addValuesToMeasurementDTO
     * @param {module:api/MeasurementcontrollerApi~addValuesToMeasurementUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addValuesToMeasurementUsingPOST = function(measurementId, addValuesToMeasurementDTO, callback) {
      var postBody = addValuesToMeasurementDTO;

      // verify the required parameter 'measurementId' is set
      if (measurementId === undefined || measurementId === null) {
        throw new Error("Missing the required parameter 'measurementId' when calling addValuesToMeasurementUsingPOST");
      }

      // verify the required parameter 'addValuesToMeasurementDTO' is set
      if (addValuesToMeasurementDTO === undefined || addValuesToMeasurementDTO === null) {
        throw new Error("Missing the required parameter 'addValuesToMeasurementDTO' when calling addValuesToMeasurementUsingPOST");
      }


      var pathParams = {
        'measurementId': measurementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/measurement/v1/measurement/{measurementId}/add-values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createMeasurementUsingPOST operation.
     * @callback module:api/MeasurementcontrollerApi~createMeasurementUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a measurement
     * Create a measurement. Place and pollutants ids must already exist.
     * @param {module:model/AddMeasurementDTO} addMeasurementDTO addMeasurementDTO
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} opts.details 
     * @param {Boolean} opts.authenticated 
     * @param {module:api/MeasurementcontrollerApi~createMeasurementUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createMeasurementUsingPOST = function(addMeasurementDTO, opts, callback) {
      opts = opts || {};
      var postBody = addMeasurementDTO;

      // verify the required parameter 'addMeasurementDTO' is set
      if (addMeasurementDTO === undefined || addMeasurementDTO === null) {
        throw new Error("Missing the required parameter 'addMeasurementDTO' when calling createMeasurementUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'details': opts['details'],
        'authenticated': opts['authenticated']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/measurement/v1/measurement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMeasurementUsingDELETE operation.
     * @callback module:api/MeasurementcontrollerApi~deleteMeasurementUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a measurement
     * Delete a specified measurement.
     * @param {Number} measurementId Id of the measurement to be deleted
     * @param {module:api/MeasurementcontrollerApi~deleteMeasurementUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMeasurementUsingDELETE = function(measurementId, callback) {
      var postBody = null;

      // verify the required parameter 'measurementId' is set
      if (measurementId === undefined || measurementId === null) {
        throw new Error("Missing the required parameter 'measurementId' when calling deleteMeasurementUsingDELETE");
      }


      var pathParams = {
        'measurementId': measurementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/measurement/v1/measurement/{measurementId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editMeasurementUsingPUT operation.
     * @callback module:api/MeasurementcontrollerApi~editMeasurementUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a measurement
     * Edit a specified measurement. All values must be valid.
     * @param {module:model/MeasurementDTO} measurementDTO measurementDTO
     * @param {module:api/MeasurementcontrollerApi~editMeasurementUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.editMeasurementUsingPUT = function(measurementDTO, callback) {
      var postBody = measurementDTO;

      // verify the required parameter 'measurementDTO' is set
      if (measurementDTO === undefined || measurementDTO === null) {
        throw new Error("Missing the required parameter 'measurementDTO' when calling editMeasurementUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/measurement/v1/measurement', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeasurementByIdUsingGET operation.
     * @callback module:api/MeasurementcontrollerApi~getMeasurementByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeasurementDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get measurement by id
     * Fetch a single measurement by a given id.
     * @param {Number} measurementId Id of the measurement to be fetched
     * @param {module:api/MeasurementcontrollerApi~getMeasurementByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeasurementDTO}
     */
    this.getMeasurementByIdUsingGET = function(measurementId, callback) {
      var postBody = null;

      // verify the required parameter 'measurementId' is set
      if (measurementId === undefined || measurementId === null) {
        throw new Error("Missing the required parameter 'measurementId' when calling getMeasurementByIdUsingGET");
      }


      var pathParams = {
        'measurementId': measurementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = MeasurementDTO;

      return this.apiClient.callApi(
        '/api/measurement/v1/measurement/{measurementId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeasurementUsingGET operation.
     * @callback module:api/MeasurementcontrollerApi~getMeasurementUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeasurementsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get measurements (optional filters)
     * Fetch a list of measurements. Measurements can be filtered by a combination of date, time, place and/or pollutant filters.
     * @param {Object} opts Optional parameters
     * @param {String} opts._date Date filter
     * @param {String} opts.time Time filter
     * @param {String} opts.place Place filter
     * @param {String} opts.pollutant Pollutant filter
     * @param {module:api/MeasurementcontrollerApi~getMeasurementUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeasurementsDTO}
     */
    this.getMeasurementUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'date': opts['_date'],
        'time': opts['time'],
        'place': opts['place'],
        'pollutant': opts['pollutant']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = MeasurementsDTO;

      return this.apiClient.callApi(
        '/api/measurement/v1/measurements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
