/**
 * API SIMCA
 * SIMCA API Client
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pdgsimca@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/AddPlaceDTO', '../model/PlaceDTO', '../model/PlacesDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddPlaceDTO'), require('../model/PlaceDTO'), require('../model/PlacesDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiSimca) {
      root.ApiSimca = {};
    }
    root.ApiSimca.PlacecontrollerApi = factory(root.ApiSimca.ApiClient, root.ApiSimca.AddPlaceDTO, root.ApiSimca.PlaceDTO, root.ApiSimca.PlacesDTO);
  }
}(this, function(ApiClient, AddPlaceDTO, PlaceDTO, PlacesDTO) {
  'use strict';

  /**
   * Placecontroller service.
   * @module api/PlacecontrollerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PlacecontrollerApi. 
   * @alias module:api/PlacecontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPlaceUsingPOST operation.
     * @callback module:api/PlacecontrollerApi~createPlaceUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a place
     * Create a place. Latitude and longitude will be shown in a map, make sure they match with the given address
     * @param {module:model/AddPlaceDTO} addPlaceDTO addPlaceDTO
     * @param {module:api/PlacecontrollerApi~createPlaceUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createPlaceUsingPOST = function(addPlaceDTO, callback) {
      var postBody = addPlaceDTO;

      // verify the required parameter 'addPlaceDTO' is set
      if (addPlaceDTO === undefined || addPlaceDTO === null) {
        throw new Error("Missing the required parameter 'addPlaceDTO' when calling createPlaceUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/place/v1/place', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLugarUsingDELETE operation.
     * @callback module:api/PlacecontrollerApi~deleteLugarUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a place
     * Delete a place by a given id
     * @param {Number} idPlace Place id
     * @param {module:api/PlacecontrollerApi~deleteLugarUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLugarUsingDELETE = function(idPlace, callback) {
      var postBody = null;

      // verify the required parameter 'idPlace' is set
      if (idPlace === undefined || idPlace === null) {
        throw new Error("Missing the required parameter 'idPlace' when calling deleteLugarUsingDELETE");
      }


      var pathParams = {
        'idPlace': idPlace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/place/v1/place/{idPlace}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editPlaceUsingPUT operation.
     * @callback module:api/PlacecontrollerApi~editPlaceUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a place
     * Edit a place with a given id. All values must be valid
     * @param {module:model/PlaceDTO} placeDTO placeDTO
     * @param {module:api/PlacecontrollerApi~editPlaceUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.editPlaceUsingPUT = function(placeDTO, callback) {
      var postBody = placeDTO;

      // verify the required parameter 'placeDTO' is set
      if (placeDTO === undefined || placeDTO === null) {
        throw new Error("Missing the required parameter 'placeDTO' when calling editPlaceUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/place/v1/place', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaceUsingGET operation.
     * @callback module:api/PlacecontrollerApi~getPlaceUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a place
     * Fetch a place by a given place id
     * @param {Number} idPlace Place id
     * @param {module:api/PlacecontrollerApi~getPlaceUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaceDTO}
     */
    this.getPlaceUsingGET = function(idPlace, callback) {
      var postBody = null;

      // verify the required parameter 'idPlace' is set
      if (idPlace === undefined || idPlace === null) {
        throw new Error("Missing the required parameter 'idPlace' when calling getPlaceUsingGET");
      }


      var pathParams = {
        'idPlace': idPlace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PlaceDTO;

      return this.apiClient.callApi(
        '/api/place/v1/place/{idPlace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlacesUsingGET operation.
     * @callback module:api/PlacecontrollerApi~getPlacesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlacesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all places
     * Fetch all registered places
     * @param {module:api/PlacecontrollerApi~getPlacesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlacesDTO}
     */
    this.getPlacesUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PlacesDTO;

      return this.apiClient.callApi(
        '/api/place/v1/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
