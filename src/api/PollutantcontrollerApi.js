/**
 * API SIMCA
 * SIMCA API Client
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pdgsimca@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/AddPollutantDTO', '../model/PollutantDTO', '../model/PollutantsDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddPollutantDTO'), require('../model/PollutantDTO'), require('../model/PollutantsDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiSimca) {
      root.ApiSimca = {};
    }
    root.ApiSimca.PollutantcontrollerApi = factory(root.ApiSimca.ApiClient, root.ApiSimca.AddPollutantDTO, root.ApiSimca.PollutantDTO, root.ApiSimca.PollutantsDTO);
  }
}(this, function(ApiClient, AddPollutantDTO, PollutantDTO, PollutantsDTO) {
  'use strict';

  /**
   * Pollutantcontroller service.
   * @module api/PollutantcontrollerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PollutantcontrollerApi. 
   * @alias module:api/PollutantcontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPollutantUsingPOST operation.
     * @callback module:api/PollutantcontrollerApi~createPollutantUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pollutant
     * Create a pollutant. Specify the correct measurement units
     * @param {module:model/AddPollutantDTO} addPollutantDTO addPollutantDTO
     * @param {module:api/PollutantcontrollerApi~createPollutantUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createPollutantUsingPOST = function(addPollutantDTO, callback) {
      var postBody = addPollutantDTO;

      // verify the required parameter 'addPollutantDTO' is set
      if (addPollutantDTO === undefined || addPollutantDTO === null) {
        throw new Error("Missing the required parameter 'addPollutantDTO' when calling createPollutantUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/pollutant/v1/pollutant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePollutantUsingDELETE operation.
     * @callback module:api/PollutantcontrollerApi~deletePollutantUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pollutant
     * Delete a pollutant by a given pollutant id
     * @param {Number} idPollutant Pollutant id
     * @param {module:api/PollutantcontrollerApi~deletePollutantUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePollutantUsingDELETE = function(idPollutant, callback) {
      var postBody = null;

      // verify the required parameter 'idPollutant' is set
      if (idPollutant === undefined || idPollutant === null) {
        throw new Error("Missing the required parameter 'idPollutant' when calling deletePollutantUsingDELETE");
      }


      var pathParams = {
        'idPollutant': idPollutant
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/pollutant/v1/pollutant/{idPollutant}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editPollutantUsingPUT operation.
     * @callback module:api/PollutantcontrollerApi~editPollutantUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a pollutant
     * Edit a pollutat with a given id. All values must be vaid
     * @param {module:model/PollutantDTO} pollutantDTO pollutantDTO
     * @param {module:api/PollutantcontrollerApi~editPollutantUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.editPollutantUsingPUT = function(pollutantDTO, callback) {
      var postBody = pollutantDTO;

      // verify the required parameter 'pollutantDTO' is set
      if (pollutantDTO === undefined || pollutantDTO === null) {
        throw new Error("Missing the required parameter 'pollutantDTO' when calling editPollutantUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/pollutant/v1/pollutant', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPollutantUsingGET operation.
     * @callback module:api/PollutantcontrollerApi~getPollutantUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollutantDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pollutant
     * Get a pollutant by a given pollutant id
     * @param {Number} idPollutant Pollutant id
     * @param {module:api/PollutantcontrollerApi~getPollutantUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PollutantDTO}
     */
    this.getPollutantUsingGET = function(idPollutant, callback) {
      var postBody = null;

      // verify the required parameter 'idPollutant' is set
      if (idPollutant === undefined || idPollutant === null) {
        throw new Error("Missing the required parameter 'idPollutant' when calling getPollutantUsingGET");
      }


      var pathParams = {
        'idPollutant': idPollutant
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PollutantDTO;

      return this.apiClient.callApi(
        '/api/pollutant/v1/pollutant/{idPollutant}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPollutantsUsingGET operation.
     * @callback module:api/PollutantcontrollerApi~getPollutantsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollutantsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all pollutants
     * Get all registered pollutants
     * @param {module:api/PollutantcontrollerApi~getPollutantsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PollutantsDTO}
     */
    this.getPollutantsUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PollutantsDTO;

      return this.apiClient.callApi(
        '/api/pollutant/v1/pollutants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
