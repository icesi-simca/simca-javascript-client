/**
 * API SIMCA
 * SIMCA API Client
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pdgsimca@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/UserProfileDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UserProfileDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiSimca) {
      root.ApiSimca = {};
    }
    root.ApiSimca.UserprofilecontrollerApi = factory(root.ApiSimca.ApiClient, root.ApiSimca.UserProfileDTO);
  }
}(this, function(ApiClient, UserProfileDTO) {
  'use strict';

  /**
   * Userprofilecontroller service.
   * @module api/UserprofilecontrollerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserprofilecontrollerApi. 
   * @alias module:api/UserprofilecontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the editUserProfileUsingPUT operation.
     * @callback module:api/UserprofilecontrollerApi~editUserProfileUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a user profile
     * Edit a user profile by a given user id
     * @param {module:model/UserProfileDTO} userProfileDTO userProfileDTO
     * @param {module:api/UserprofilecontrollerApi~editUserProfileUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.editUserProfileUsingPUT = function(userProfileDTO, callback) {
      var postBody = userProfileDTO;

      // verify the required parameter 'userProfileDTO' is set
      if (userProfileDTO === undefined || userProfileDTO === null) {
        throw new Error("Missing the required parameter 'userProfileDTO' when calling editUserProfileUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/userprofile/v1/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProfileUsingGET operation.
     * @callback module:api/UserprofilecontrollerApi~getUserProfileUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfileDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user profile
     * Get a user profile by a given user id
     * @param {String} id User id
     * @param {module:api/UserprofilecontrollerApi~getUserProfileUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProfileDTO}
     */
    this.getUserProfileUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserProfileUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = UserProfileDTO;

      return this.apiClient.callApi(
        '/api/userprofile/v1/profile/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
